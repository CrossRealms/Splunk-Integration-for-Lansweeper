
import logger_manager as log
import import_declare_test

from splunktaucclib.rest_handler.endpoint import (
    field,
    validator,
    RestModel,
    SingleModel,
)
from splunktaucclib.rest_handler import admin_external, util
from splunktaucclib.rest_handler.admin_external import AdminExternalHandler
from splunktaucclib.rest_handler.admin_external import AdminExternalHandler
import logging

util.remove_http_proxy_env_vars()
logger = log.setup_logging('ta_lansweeper_account')

class CustomConfigMigrationHandler(AdminExternalHandler):
    """
    Manage the Rest Handler for server
    """
    def set_endpoint(self):
        try:
            self.payload['endpoint'] = "app.lansweeper.com"
        except Exception as exception:
            logger.error('Could not save the endpoint field for the account')

    def handleEdit(self, conf_info):
        """
        Handles the edit operation
        :param conf_info: Default parameter generated by UCC which is used to pass the response
        :return:
        """
        self.set_endpoint()
        super(CustomConfigMigrationHandler, self).handleEdit(conf_info)

    def handleCreate(self, conf_info):
        """
        Handles the create operation
        :param conf_info: Default parameter generated by UCC which is used to pass the response
        :return:
        """
        self.set_endpoint()
        super(CustomConfigMigrationHandler, self).handleCreate(conf_info)

fields = [
    field.RestField(
        'client_id',
        required=False,
        encrypted=False,
        default=None,
        validator=None
    ), 
    field.RestField(
        'client_secret',
        required=False,
        encrypted=True,
        default=None,
        validator=None
    ), 
    field.RestField(
        'redirect_url',
        required=False,
        encrypted=False,
        default=None,
        validator=None
    ), 
    field.RestField(
        'access_token',
        required=False,
        encrypted=True,
        default=None,
        validator=None
    ), 
    field.RestField(
        'refresh_token',
        required=False,
        encrypted=True,
        default=None,
        validator=None
    ), 
    field.RestField(
        'instance_url',
        required=False,
        encrypted=False,
        default=None,
        validator=None
    )
]
model = RestModel(fields, name=None)


endpoint = SingleModel(
    'ta_lansweeper_add_on_for_splunk_account',
    model,
    config_name='account'
)


if __name__ == '__main__':
    logging.getLogger().addHandler(logging.NullHandler())
    admin_external.handle(
        endpoint,
        handler=CustomConfigMigrationHandler,
    )
